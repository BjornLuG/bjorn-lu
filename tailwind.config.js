module.exports = {
  theme: {
    colors: {
      transparent: "transparent",
      current: "currentColor",
      black: "#181818",
      white: "#efefef",
      // Generated by https://javisperez.github.io/tailwindcolorshades
      primary: {
        100: "#EAFEFF",
        200: "#CBFDFF",
        300: "#ABFBFF",
        400: "#6CF8FF",
        500: "#2DF5FF",
        600: "#29DDE6",
        700: "#1B9399",
        800: "#146E73",
        900: "#0E4A4D",
      },
      secondary: {
        100: "#FFE7FA",
        200: "#FFC4F3",
        300: "#FFA1EB",
        400: "#FE5ADC",
        500: "#FE13CD",
        600: "#E511B9",
        700: "#980B7B",
        800: "#72095C",
        900: "#4C063E",
      },
      dark: {
        100: "#E8E6E8",
        200: "#C5C0C6",
        300: "#A39AA3",
        400: "#5D4F5F",
        500: "#18031A",
        600: "#160317",
        700: "#0E0210",
        800: "#0B010C",
        900: "#070108",
      },
    },
    extend: {
      fontFamily: {
        cursive: ["Pacifico", "cursive"],
        sans: ['"Source Sans Pro"', "sans-serif"],
      },
    },
  },
  variants: {},
  plugins: [containerPlugin(), glowColorPlugin()],
}

//#region Container plugin (custom width)

// Custom max-width needs to be done manually
// https://github.com/tailwindcss/tailwindcss/issues/1102
function containerPlugin() {
  return ({ addComponents }) => {
    addComponents({
      ".container": {
        maxWidth: "100%",
        paddingLeft: "1rem",
        paddingRight: "1rem",
        marginLeft: "auto",
        marginRight: "auto",
        "@screen sm": {
          maxWidth: "640px",
        },
        "@screen md": {
          maxWidth: "768px",
        },
        "@screen lg": {
          maxWidth: "810px",
        },
        "@screen xl": {
          maxWidth: "810px",
        },
      },
    })
  }
}

//#endregion

//#region Neon glow effect plugin

function glowColorPlugin() {
  return ({ addUtilities, theme, variants }) => {
    const colors = theme("colors", {})

    const utilities = Object.entries(colors).reduce(
      (acc, [colorName, colorValue]) => {
        // If is direct string value, make it and object with default property
        if (typeof colorValue !== "object") {
          colorValue = { default: colorValue }
        }

        // Iterate all shades
        Object.entries(colorValue).forEach(([shadeName, shadeValue]) => {
          // Filter out "default" suffix, so instead of red-default => red
          const colorShadeName = [colorName, shadeName]
            .filter(v => v !== "default")
            .join("-")

          // Text shadows
          acc[`.text-glow-${colorShadeName}-xs`] = {
            textShadow: glowShadow(shadeValue, 1),
          }
          acc[`.text-glow-${colorShadeName}-sm`] = {
            textShadow: glowShadow(shadeValue, 2),
          }
          acc[`.text-glow-${colorShadeName}`] = {
            textShadow: glowShadow(shadeValue, 3),
          }
          acc[`.text-glow-${colorShadeName}-md`] = {
            textShadow: glowShadow(shadeValue, 4),
          }
          acc[`.text-glow-${colorShadeName}-lg`] = {
            textShadow: glowShadow(shadeValue, 5),
          }

          // Box shadows
          acc[`.box-glow-${colorShadeName}-xs`] = {
            boxShadow: glowShadow(shadeValue, 1),
          }
          acc[`.box-glow-${colorShadeName}-sm`] = {
            boxShadow: glowShadow(shadeValue, 2),
          }
          acc[`.box-glow-${colorShadeName}`] = {
            boxShadow: glowShadow(shadeValue, 3),
          }
          acc[`.box-glow-${colorShadeName}-md`] = {
            boxShadow: glowShadow(shadeValue, 4),
          }
          acc[`.box-glow-${colorShadeName}-lg`] = {
            boxShadow: glowShadow(shadeValue, 5),
          }

          // Box shadows with inset
          acc[`.box-glow-full-${colorShadeName}-xs`] = {
            boxShadow: glowShadow(shadeValue, 1, true),
          }
          acc[`.box-glow-full-${colorShadeName}-sm`] = {
            boxShadow: glowShadow(shadeValue, 2, true),
          }
          acc[`.box-glow-full-${colorShadeName}`] = {
            boxShadow: glowShadow(shadeValue, 3, true),
          }
          acc[`.box-glow-full-${colorShadeName}-md`] = {
            boxShadow: glowShadow(shadeValue, 4, true),
          }
          acc[`.box-glow-full-${colorShadeName}-lg`] = {
            boxShadow: glowShadow(shadeValue, 5, true),
          }
        })

        return acc
      },
      // Default object
      {
        ".text-glow-none": {
          textShadow: "none",
        },
        ".box-glow-none": {
          boxShadow: "none",
        },
      }
    )

    addUtilities(
      utilities,
      variants("boxShadow", ["responsive", "hover", "focus"])
    )
  }
}

/**
 * Generates a new glow shadow
 * @param {string} color Glow color
 * @param {number} spreadSteps Number of spread steps
 * @param {boolean} repeatInset Repeat shadow for inset
 */
function glowShadow(color, spreadSteps, repeatInset = false) {
  const shadows = []

  for (let i = 1; i <= spreadSteps; i++) {
    const shadow = `0 0 ${getSpread(i)}px ${color}`

    shadows.push(shadow)

    // If inset, we repeat the shadow for inset
    if (repeatInset) {
      shadows.push("inset " + shadow)
    }
  }

  return shadows.join(", ")
}

/**
 * Gets the spread radius pixel by steps (Custom formula)
 * @param {number} steps Number of spread steps
 */
function getSpread(steps) {
  return Math.floor(steps * (steps + 1))
}

//#endregion
